\\ Tau is Sloane's A173419.
{Tau=[0,1,2,2,3,3,4,3,3,4,4,4,5,4,4,3,4,4,5,4,5,5,5,4,4,5,4,5,5,5,5,4,5,5,5,4,5,5,5,5,6,5,6,6,5,6,6,5,5,5,6,6,6,5,6,5,6,6,6,5,6,5,5,4,5,5,6,5,6,6,6,5,6,6,5,6,6,5,5,5,4,5,5,5,
6,6,6,6,6,5,6,6,6,6,6,5,6,6,5,5,6,6,6,6,6,6,6,5,6,6,6,6,7,6,6,6,6,6,6,6,5,6,6,6,5,6,6,5,6,6,7,6,7,7,6,6,7,6,7,6,6,6,6,5,6,6,6,6,7,6,7,6,6,6,7,6,7,6,6,6,6,5,6,6,6,6,7,6,6,7,6,
7,7,7,6,6,7,7,7,6,7,6,7,7,7,7,7,6,6,6,6,5,6,6,6,5,6,6,7,6,7,7,7,6,7,7,7,6,6,6,7,6,6,6,6,5,6,6,6,6,6,6,6,5,5,6,6,6,6,6,7,7,7,6,7,6,6,6,6,5,6,6,5,6,6,6,7,6,6,6,6,5,6,5,5,4,5,5,
6,5,6,6,7,6,7,7,7,6,7,6,6,5,6,6,7,6,7,7,7,6,7,7,7,6,6,6,6,5,5,6,6,6,6,6,7,7,6,7,7,6,7,7,7,6,6,6,7,6,7,7,8,7,7,7,6,6,7,6,6,5,6,6,6,5,6,6,6,6,7,6,7,7,6,7,7,6,7,7,7,6,7,6,6,7,7,
7,7,7,7,7,7,6,7,7,7,7,6,7,7,6,6,7,6,7,7,7,7,7,7,7,7,7,7,7,6,7,7,6,7,6,7,7,7,6,7,7,7,7,7,7,7,6,7,7,6,6,7,6,6,5,6,6,7,6,6,7,7,7,7,7,7,7,8,7,7,6,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,6,
7,7,7,7,7,7,7,6,6,7,7,7,7,7,7,6,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,8,7,7,7,7,7,7,7,7,6,7,7,7,6,7,6,7,7,7,7,8,7,7,7,7,6,7,7,7,6,7,7,7,6,7,7,7,6,7,6,6,5,6,6,7,6,7,7,7,
6,7,7,7,7,6,7,7,6,6,7,7,7,7,7,7,7,8,8,7,7,8,7,7,6,7,7,7,7,7,6,7,6,7,7,7,7,7,7,7,7,6,7,7,7,7,7,6,7,7,6,7,6,7,6,6,5,6,6,7,6,7,6,7,7,7,7,8,7,7,7,8,7,8,7,7,7,7,7,7,6,7,7,7,7,7,7,
8,7,7,7,7,6,7,7,7,7,7,7,7,6,6,6,6,6,5,6,6,6,6,6,7,7,7,7,7,7,7,7,7,6,7,7,8,7,7,7,7,6,7,6,7,7,7,7,7,7,7,8,8,7,8,8,8,7,7,7,7,7,7,7,7,6,7,7,6,6,7,7,7,7,7,7,8,7,7,7,8,8,8,7,8,8,7,
8,7,7,7,7,7,6,7,6,7,7,7,8,8,7,7,7,6,7,7,7,8,7,7,7,7,6,7,7,7,7,6,6,6,6,5,6,6,6,7,7,7,7,7,6,7,7,7,8,8,7,7,7,6,7,7,6,7,7,7,7,7,6,7,7,7,7,8,7,8,7,7,7,7,6,7,7,7,7,8,7,7,7,7,7,7,7,
7,7,6,6,7,7,7,7,7,7,7,7,7,8,7,7,8,7,7,6,7,7,8,7,7,7,7,7,7,6,7,7,7,7,8,7,8,8,7,7,8,8,8,8,7,8,8,7,8,7,8,7,7,8,8,7,7,7,7,7,6,7,7,7,7,7,7,7,8,7,8,7,8,8,8,7,8,7,8,7,7,7,7,6,7,7,7,
7,7,7,8,7,7,8,7,7,8,8,8,7,8,7,8,7,7,7,8,7,7,7,6,7,7,7,7,6,7,7,7,6,7,7,7,7,7,7,8,7,7,7,8,7,7,7,7,7,8,7,8,7,8,8,8,7,7,8,7,7,7,7,8,7,8,8,8,7,8,8,8,7,8,8,8,7,7,7,8,7,8,7,8,7,7,7,
8,7,7,7,7,6,6,7,7,7,7,7,8,7,7,7,7,6,7,7,7,7,7,7,8,7,7,8,8,7,8,7,8,7,8,7,7,6,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,6,7,7,8,7,8,7,7,6,7,7,7,6,7,6,6,5,6,6,7,6,7,7,7,6,7,7,8,7,8,7,7,6,7,
7,8,7,8,8,8,7,8,7,8,7,7,7,7,6,7,7,8,7,8,7,8,7,8,8,7,8,8,8,7,7,7,7,8,7,7,7,7,6,7,7,7,7,7,7,7,6,6,7,7,7,7,8,7,7,7,7,8,7,8,7,8,7,7,7,7,8,8,7,7,8,8,8,7,7,8,8,8,7,7,7,7,7,6,7,7,7,
8,7,8,8,8,7,7,7,8,7,7,7,8,8,8,7,8,7,7,7,8,7,7,6,7,7,7,6,7,7,7,7,8,7,8,7,8,8,8,7,8,7,8,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,6,7,7,7,7,8,7,8,8,">=8",8,8,7,8,8,">=8",8,">=8",8,8,8,7,
7,8,8,8,8,7,7,8,7,7,7,7,7,7,6,6,7,7,7,7,7,7,7,8,8,8,8,">=8",8,8,7,8,7,8,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,6,7,7,7,7,8,7,8,8,7,7,8,7,8,8,7,7,8,7,7,6,7,7,8,7,7,7,7,7,7,6,7,6,6,6,
6,5,6,6,6,6,7,6,7,7,7,7,8,7,7,8,8,7,8,7,8,7,8,8,8,7,8,7,7,8,7,7,8,7,7,7,6,6,7,7,7,7,8,7,8,7,8,7,8,7,8,8,">=8",8,8,7,8,7,7,8,8,8,">=8",8,8,7,8,7,7,7,7,7,7,6,6,7,7,7,7,7,7,8,7,
7,8,7,8,8,8,8,8,7,8,8,">=8",8,">=8",8,">=8",8,">=8",8,8,7,8,7,7,7,7,6,7,7,7,7,8,7,8,8,">=8",">=8",">=8",8,">=8",8,">=8",8,8,7,8,8,8,7,8,7,8,7,7,8,8,7,7,7,8,7,7,6,7,7,7,6,7,7,
7,7,7,7,8,7,8,7,7,7,7,6,7,7,7,7,8,7,8,8,7,8,8,7,8,7,8,8,8,7,8,8,8,7,8,7,8,7,7,8,8,7,8,8,">=8",8,8,7,8,8,">=8",8,8,7,8,8,8,7,8,7,8,7,7,7,7,6,7,7,7,7,7,7,7,7,6,7,7,7,8,8,7,8,8,
7,8,7,8,7,7,6,7,7,7,7,8,7,8,8,">=8",8,8,7,8,8,8,7,8,7,8,8,7,7,8,7,8,8,8,7,8,7,8,7,8,8,8,7,7,8,7,8,8,8,8,7,8,8,8,7,8,8,7,8,8,7,7,7,8,7,7,7,7,7,7,6,7,7,7,7,7,7,8,7,8,7,8,8,
">=8",8,8,7,7,8,8,7,8,8,8,7,8,8,">=8",8,">=8",8,8,7,8,8,8,7,8,7,8,7,8,8,">=8",8,">=8",">=8",">=8",8,8,7,8,8,">=8",8,8,7,8,8,">=8",8,">=8",8,8,7,8,8,">=8",8,">=8",8,8,7,8,8,
">=8",8,">=8",8,8,7,7,7,8,8,8,8,">=8",8,8,7,8,7,8,7,8,8,">=8",8,8,7,7,8,8,7,8,8,">=8",8,8,7,8,7,8,8,7,7,8,8,7,7,8,7,8,7,7,7,7,6,7,7,7,7,8,7,8,7,7,8,8,7,8,8,8,7,8,8,">=8",8,8,
7,8,7,8,8,7,8,7,7,8,7,7,7,7,6,7,7,7,7,8,7,7,8,8,8,8,7,8,8,">=8",8,8,7,8,8,">=8",8,">=8",8,">=8",8,8,7,8,8,">=8",8,">=8",8,8,7,8,8,8,8,7,7,8,8,8,8,">=8",8,8,8,7,8,8,8,">=8",8,
">=8",8,8,7,7,8,8,8,">=8",8,">=8",8,">=8",8,8,7,8,8,8,7,8,8,8,8,7,8,8,7,7,7,8,8,8,8,">=8",8,8,8,7,7,8,8,8,8,8,7,8,8,7,7,8,7,7,7,6,7,7,7,8,7,7,8,8,7,8,8,">=8",8,8,7,8,8,">=8",
">=8",">=8",8,">=8",8,8,7,8,8,">=8",8,">=8",8,8,7,8,8,">=8",8,">=8",8,">=8",8,">=8",8,8,7,8,7,8,8,7,7,8,8,8,8,8,7,8,8,7,7,8,7,8,8,7,7,7,6,7,7,7,8,8,7,8,8,7,8,8,7,8,8,8,7,8,7,
8,8,">=8",">=8",">=8",8,">=8",">=8",">=8",8,8,8,7,8,8,8,8,7,8,8,8,7,8,8,">=8",8,8,7,8,8,8,8,7,7,8,7,7,6];}

/*
L4=level(4);
P4=possibilities(L4);
L5=level(5);
P5=possibilities(L5);
L6=level(6);
P6=possibilities(L6);
L7=level(7);
P7=possibilities(L7);
L8=level(8);
P8=possibilities(L8);
*/

\\ See "On the intractability of Hilbert's Nullstellensatz and an algebraic version of 'NP â‰  P'"
tau(n)={
	if(n<5,
		min(2,n-1)
	,
		if(in(P4,n),3,if(in(P5,n),4,if(in(P6,n),5,if(in(P7,n),6,if(in(P8,n),7,"big")))))
	)
};

\\ Given a vector of heights, where every height is at most some bound B and all
\\ greater heights are marked "big", return a vector of heights by 'filling in'
\\ some of the gaps. Only works for hights up to B+1. Invoke as:
\\ fixtau(vector(1000,n,tau(n)))
\\ or similar. Assumes B is at least 3, and that all heights up to B are in the table.
fixtau(H)={
	my(mx=1);
	for(i=1,#H,if(type(H[i]) == "t_INT", mx=max(mx,H[i])));
	forstep(i=#H,17,-1,
		if (type(H[i]) == "t_STR",
			\\ If B is at least 0, then 1 is mx-possible (check for addition and subtraction)
			if (H[i-1] == mx || (i < #H && H[i+1] == mx) ||
			\\ If B is at least 1, then 2 is mx-possible (check for addition, subtraction, and multiplication)
			H[i-2] == mx || (i < #H-1 && H[i+2] == mx) || (i%2 ==0 && H[i\2] == mx) ||
			\\ If B is at least 2, then at least one of {3, 4} is mx-possible (check for addition, subtraction, and multiplication)
			(H[i-3] == mx && H[i-4] == mx) || (i < #H-3 && H[i+3] == mx && H[i+4] == mx) || (i%12 == 0 && H[i\3] == mx && H[i\4] == mx) ||
			\\ If B is at least 3, then at least one of {3, 5, 6, 8, 9, 16} is mx-possible (check for addition)
			\\ If B is at least 3, then at least one of {4, 5, 6, 8, 9, 16} is mx-possible (check for addition)
			((H[i-3] == mx || H[i-4] == mx) && H[i-5] == mx && H[i-6] == mx && H[i-8] == mx && H[i-9] == mx && H[i-16] == mx),
				H[i] = mx + 1
			,
				H[i] = concat(">=", mx+1)
			)
		)
	);
	H
};

step(v)={
	my(s=[]);
	for(i=1,#v-1,
		for(j=i+1,#v,
			\\s=concat(s,v[i]+v[j])	\\ Addition chains
			\\s=concat(s,[v[i]*v[j],v[i]+v[j]])	\\ Addition and multiplication
			\\s=concat(s,[v[i]*v[j],v[i]+v[j],v[i]-v[j],v[j]-v[i]])	\\ Addition, multiplication, and subtraction
			s=concat(s,[v[i]*v[j],v[i]+v[j],abs(v[i]-v[j])])	\\ Addition, multiplication, and subtraction (nonnegatives only)
		);
		s=vecsort(s,,8)
	);
	s=concat(s,concat(vector(#v,i,v[i]^2),vector(#v,i,v[i]*2)));
	s=vecsort(s,,8);
	s=setminus(Set(s),Set(v));
	vecsort(eval(s))
};
join(v,u)={
	my(s=vector(#u));
	v=vector(#v+1,i,if(i<=#v,v[i]));
	for(i=1,#s,
		v[#v]=u[i];
		s[i]=v
	);
	s
};
level(n)={
	my(s=[[1]],t);
	for(j=2,n,
		t=[];
		for(i=1,#s,
			t=concat(t,join(s[i],step(s[i])))
		);
		s=t
	);
	s
};
possibilities(V)={
	my(s=[]);
	for(i=1,#V,
		s=concat(s,V[i]);
		if(!bitand(i,255), s=vecsort(s,,8))
	);
	vecsort(s,,8)
};

in(v,n)={
	for(i=1,#v,
		if(v[i]==n,return(1))
	);
	0
};
